// Code generated by goa v3.13.2, DO NOT EDIT.
//
// checker HTTP client encoders and decoders
//
// Command:
// $ goa gen syncer/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	checker "syncer/gen/checker"
	checkerviews "syncer/gen/checker/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "checker" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCheckerPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("checker", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the checker get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*checker.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("checker", "get", "*checker.GetPayload", v)
		}
		{
			head := p.Origin
			req.Header.Set("X-Nginx-Origin", head)
		}
		{
			head := p.Token
			req.Header.Set("X-Feg-Token", head)
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the checker
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				status string
			)
			statusRaw := resp.Header.Get("X-Token-Status")
			if statusRaw != "" {
				status = statusRaw
			} else {
				status = "synced"
			}
			p := NewGetSyncOK(status)
			view := "default"
			vres := &checkerviews.Sync{Projected: p, View: view}
			res := checker.NewSync(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("checker", "get", resp.StatusCode, string(body))
		}
	}
}
