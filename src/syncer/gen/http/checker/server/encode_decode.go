// Code generated by goa v3.13.2, DO NOT EDIT.
//
// checker HTTP server encoders and decoders
//
// Command:
// $ goa gen syncer/design

package server

import (
	"context"
	"net/http"
	checkerviews "syncer/gen/checker/views"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetResponse returns an encoder for responses returned by the checker
// get endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*checkerviews.Sync)
		if res.Projected.Status != nil {
			w.Header().Set("X-Token-Status", *res.Projected.Status)
		} else {
			w.Header().Set("X-Token-Status", "synced")
		}
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeGetRequest returns a decoder for requests sent to the checker get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			origin string
			token  string
			err    error
		)
		origin = r.Header.Get("X-Nginx-Origin")
		if origin == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("origin", "header"))
		}
		token = r.Header.Get("X-Feg-Token")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("token", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetPayload(origin, token)

		return payload, nil
	}
}
