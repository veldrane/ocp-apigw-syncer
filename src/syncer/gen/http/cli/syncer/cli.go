// Code generated by goa v3.13.2, DO NOT EDIT.
//
// syncer HTTP client CLI support package
//
// Command:
// $ goa gen syncer/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	checkerc "syncer/gen/http/checker/client"
	healthc "syncer/gen/http/health/client"
	rootc "syncer/gen/http/root/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `checker get
health get
root default
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` checker get --origin "Corrupti hic architecto reprehenderit velit reiciendis." --auth-token "Fugiat nulla."` + "\n" +
		os.Args[0] + ` health get` + "\n" +
		os.Args[0] + ` root default` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		checkerFlags = flag.NewFlagSet("checker", flag.ContinueOnError)

		checkerGetFlags         = flag.NewFlagSet("get", flag.ExitOnError)
		checkerGetOriginFlag    = checkerGetFlags.String("origin", "REQUIRED", "")
		checkerGetAuthTokenFlag = checkerGetFlags.String("auth-token", "REQUIRED", "")

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthGetFlags = flag.NewFlagSet("get", flag.ExitOnError)

		rootFlags = flag.NewFlagSet("root", flag.ContinueOnError)

		rootDefaultFlags = flag.NewFlagSet("default", flag.ExitOnError)
	)
	checkerFlags.Usage = checkerUsage
	checkerGetFlags.Usage = checkerGetUsage

	healthFlags.Usage = healthUsage
	healthGetFlags.Usage = healthGetUsage

	rootFlags.Usage = rootUsage
	rootDefaultFlags.Usage = rootDefaultUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "checker":
			svcf = checkerFlags
		case "health":
			svcf = healthFlags
		case "root":
			svcf = rootFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "checker":
			switch epn {
			case "get":
				epf = checkerGetFlags

			}

		case "health":
			switch epn {
			case "get":
				epf = healthGetFlags

			}

		case "root":
			switch epn {
			case "default":
				epf = rootDefaultFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "checker":
			c := checkerc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = checkerc.BuildGetPayload(*checkerGetOriginFlag, *checkerGetAuthTokenFlag)
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data = nil
			}
		case "root":
			c := rootc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "default":
				endpoint = c.Default()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// checkerUsage displays the usage of the checker command and its subcommands.
func checkerUsage() {
	fmt.Fprintf(os.Stderr, `Check the replicas of nginx instancies
Usage:
    %[1]s [globalflags] checker COMMAND [flags]

COMMAND:
    get: Get last full report

Additional help:
    %[1]s checker COMMAND --help
`, os.Args[0])
}
func checkerGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] checker get -origin STRING -auth-token STRING

Get last full report
    -origin STRING: 
    -auth-token STRING: 

Example:
    %[1]s checker get --origin "Corrupti hic architecto reprehenderit velit reiciendis." --auth-token "Fugiat nulla."
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Service is the health service interface.
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    get: Ping endpoin

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health get

Ping endpoin

Example:
    %[1]s health get
`, os.Args[0])
}

// rootUsage displays the usage of the root command and its subcommands.
func rootUsage() {
	fmt.Fprintf(os.Stderr, `Service provide redirect to swagger-ui
Usage:
    %[1]s [globalflags] root COMMAND [flags]

COMMAND:
    default: Return default redirect

Additional help:
    %[1]s root COMMAND --help
`, os.Args[0])
}
func rootDefaultUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] root default

Return default redirect

Example:
    %[1]s root default
`, os.Args[0])
}
