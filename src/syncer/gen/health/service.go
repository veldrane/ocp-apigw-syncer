// Code generated by goa v3.13.2, DO NOT EDIT.
//
// health service
//
// Command:
// $ goa gen syncer/design

package health

import (
	"context"
	healthviews "syncer/gen/health/views"
)

// Service is the health service interface.
type Service interface {
	// Ping endpoin
	Get(context.Context) (res *Health, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "health"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"get"}

// Health is the result type of the health service get method.
type Health struct {
	Status string
}

// NewHealth initializes result type Health from viewed result type Health.
func NewHealth(vres *healthviews.Health) *Health {
	return newHealth(vres.Projected)
}

// NewViewedHealth initializes viewed result type Health from result type
// Health using the given view.
func NewViewedHealth(res *Health, view string) *healthviews.Health {
	p := newHealthView(res)
	return &healthviews.Health{Projected: p, View: "default"}
}

// newHealth converts projected type Health to service type Health.
func newHealth(vres *healthviews.HealthView) *Health {
	res := &Health{}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Status == nil {
		res.Status = "Up"
	}
	return res
}

// newHealthView projects result type Health to projected type HealthView using
// the "default" view.
func newHealthView(res *Health) *healthviews.HealthView {
	vres := &healthviews.HealthView{
		Status: &res.Status,
	}
	return vres
}
