// Code generated by goa v3.13.2, DO NOT EDIT.
//
// checker service
//
// Command:
// $ goa gen syncer/design

package checker

import (
	"context"
	checkerviews "syncer/gen/checker/views"

	goa "goa.design/goa/v3/pkg"
)

// Check the replicas of nginx instancies
type Service interface {
	// Get last full report
	Get(context.Context) (res *Sync, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "checker"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"get"}

// Sync is the result type of the checker service get method.
type Sync struct {
	Status *string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InternalError", false, false, false)
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "Unauthorized", false, false, false)
}

// NewSync initializes result type Sync from viewed result type Sync.
func NewSync(vres *checkerviews.Sync) *Sync {
	return newSync(vres.Projected)
}

// NewViewedSync initializes viewed result type Sync from result type Sync
// using the given view.
func NewViewedSync(res *Sync, view string) *checkerviews.Sync {
	p := newSyncView(res)
	return &checkerviews.Sync{Projected: p, View: "default"}
}

// newSync converts projected type Sync to service type Sync.
func newSync(vres *checkerviews.SyncView) *Sync {
	res := &Sync{
		Status: vres.Status,
	}
	return res
}

// newSyncView projects result type Sync to projected type SyncView using the
// "default" view.
func newSyncView(res *Sync) *checkerviews.SyncView {
	vres := &checkerviews.SyncView{
		Status: res.Status,
	}
	return vres
}
